// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// kafka_version
std::string kafka_version();
RcppExport SEXP _rkafka_kafka_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(kafka_version());
    return rcpp_result_gen;
END_RCPP
}
// kafka_conf_new
uint64_t kafka_conf_new();
RcppExport SEXP _rkafka_kafka_conf_new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(kafka_conf_new());
    return rcpp_result_gen;
END_RCPP
}
// kafka_conf_set
bool kafka_conf_set(uint64_t p, std::string const& k, std::string const& v);
RcppExport SEXP _rkafka_kafka_conf_set(SEXP pSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_conf_set(p, k, v));
    return rcpp_result_gen;
END_RCPP
}
// kafka_conf_destroy
void kafka_conf_destroy(uint64_t p);
RcppExport SEXP _rkafka_kafka_conf_destroy(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p(pSEXP);
    kafka_conf_destroy(p);
    return R_NilValue;
END_RCPP
}
// kafka_topic_conf_new
uint64_t kafka_topic_conf_new();
RcppExport SEXP _rkafka_kafka_topic_conf_new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(kafka_topic_conf_new());
    return rcpp_result_gen;
END_RCPP
}
// kafka_topic_conf_set
bool kafka_topic_conf_set(uint64_t p, std::string const& k, std::string const& v);
RcppExport SEXP _rkafka_kafka_topic_conf_set(SEXP pSEXP, SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_topic_conf_set(p, k, v));
    return rcpp_result_gen;
END_RCPP
}
// kafka_topic_conf_destroy
void kafka_topic_conf_destroy(uint64_t p);
RcppExport SEXP _rkafka_kafka_topic_conf_destroy(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p(pSEXP);
    kafka_topic_conf_destroy(p);
    return R_NilValue;
END_RCPP
}
// kafka_consumer_new
uint64_t kafka_consumer_new(uint64_t p_conf);
RcppExport SEXP _rkafka_kafka_consumer_new(SEXP p_confSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_conf(p_confSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_consumer_new(p_conf));
    return rcpp_result_gen;
END_RCPP
}
// kafka_producer_new
uint64_t kafka_producer_new(uint64_t p_conf);
RcppExport SEXP _rkafka_kafka_producer_new(SEXP p_confSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_conf(p_confSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_producer_new(p_conf));
    return rcpp_result_gen;
END_RCPP
}
// kafka_destroy
void kafka_destroy(uint64_t p);
RcppExport SEXP _rkafka_kafka_destroy(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p(pSEXP);
    kafka_destroy(p);
    return R_NilValue;
END_RCPP
}
// kafka_topic_new
uint64_t kafka_topic_new(uint64_t p_client, std::string const& name, uint64_t p_conf);
RcppExport SEXP _rkafka_kafka_topic_new(SEXP p_clientSEXP, SEXP nameSEXP, SEXP p_confSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_client(p_clientSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type p_conf(p_confSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_topic_new(p_client, name, p_conf));
    return rcpp_result_gen;
END_RCPP
}
// kafka_topic_destroy
void kafka_topic_destroy(uint64_t p);
RcppExport SEXP _rkafka_kafka_topic_destroy(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p(pSEXP);
    kafka_topic_destroy(p);
    return R_NilValue;
END_RCPP
}
// kafka_produce
bool kafka_produce(uint64_t p_topic, int partition, std::string const& payload, std::string const& key);
RcppExport SEXP _rkafka_kafka_produce(SEXP p_topicSEXP, SEXP partitionSEXP, SEXP payloadSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_topic(p_topicSEXP);
    Rcpp::traits::input_parameter< int >::type partition(partitionSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type payload(payloadSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_produce(p_topic, partition, payload, key));
    return rcpp_result_gen;
END_RCPP
}
// kafka_produce_batch
bool kafka_produce_batch(uint64_t p_topic, int partition, DataFrame batch);
RcppExport SEXP _rkafka_kafka_produce_batch(SEXP p_topicSEXP, SEXP partitionSEXP, SEXP batchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_topic(p_topicSEXP);
    Rcpp::traits::input_parameter< int >::type partition(partitionSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type batch(batchSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_produce_batch(p_topic, partition, batch));
    return rcpp_result_gen;
END_RCPP
}
// kafka_consume_batch
StringVector kafka_consume_batch(uint64_t p_topic, int partition, int32_t timeout);
RcppExport SEXP _rkafka_kafka_consume_batch(SEXP p_topicSEXP, SEXP partitionSEXP, SEXP timeoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_topic(p_topicSEXP);
    Rcpp::traits::input_parameter< int >::type partition(partitionSEXP);
    Rcpp::traits::input_parameter< int32_t >::type timeout(timeoutSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_consume_batch(p_topic, partition, timeout));
    return rcpp_result_gen;
END_RCPP
}
// kafka_consume_start
bool kafka_consume_start(uint64_t p_topic, int partition, int64_t offset);
RcppExport SEXP _rkafka_kafka_consume_start(SEXP p_topicSEXP, SEXP partitionSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_topic(p_topicSEXP);
    Rcpp::traits::input_parameter< int >::type partition(partitionSEXP);
    Rcpp::traits::input_parameter< int64_t >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_consume_start(p_topic, partition, offset));
    return rcpp_result_gen;
END_RCPP
}
// kafka_consume_stop
bool kafka_consume_stop(uint64_t p_topic, int partition);
RcppExport SEXP _rkafka_kafka_consume_stop(SEXP p_topicSEXP, SEXP partitionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_topic(p_topicSEXP);
    Rcpp::traits::input_parameter< int >::type partition(partitionSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_consume_stop(p_topic, partition));
    return rcpp_result_gen;
END_RCPP
}
// kafka_flush
bool kafka_flush(uint64_t p_client, int32_t timeout);
RcppExport SEXP _rkafka_kafka_flush(SEXP p_clientSEXP, SEXP timeoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_client(p_clientSEXP);
    Rcpp::traits::input_parameter< int32_t >::type timeout(timeoutSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_flush(p_client, timeout));
    return rcpp_result_gen;
END_RCPP
}
// kafka_subscribe
bool kafka_subscribe(uint64_t p_client, DataFrame topics);
RcppExport SEXP _rkafka_kafka_subscribe(SEXP p_clientSEXP, SEXP topicsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_client(p_clientSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type topics(topicsSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_subscribe(p_client, topics));
    return rcpp_result_gen;
END_RCPP
}
// kafka_unsubscribe
bool kafka_unsubscribe(uint64_t p_client);
RcppExport SEXP _rkafka_kafka_unsubscribe(SEXP p_clientSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_client(p_clientSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_unsubscribe(p_client));
    return rcpp_result_gen;
END_RCPP
}
// kafka_consumer_poll
List kafka_consumer_poll(uint64_t p_client, int32_t timeout);
RcppExport SEXP _rkafka_kafka_consumer_poll(SEXP p_clientSEXP, SEXP timeoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_client(p_clientSEXP);
    Rcpp::traits::input_parameter< int32_t >::type timeout(timeoutSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_consumer_poll(p_client, timeout));
    return rcpp_result_gen;
END_RCPP
}
// kafka_consumer_close
bool kafka_consumer_close(uint64_t p_client);
RcppExport SEXP _rkafka_kafka_consumer_close(SEXP p_clientSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< uint64_t >::type p_client(p_clientSEXP);
    rcpp_result_gen = Rcpp::wrap(kafka_consumer_close(p_client));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rkafka_kafka_version", (DL_FUNC) &_rkafka_kafka_version, 0},
    {"_rkafka_kafka_conf_new", (DL_FUNC) &_rkafka_kafka_conf_new, 0},
    {"_rkafka_kafka_conf_set", (DL_FUNC) &_rkafka_kafka_conf_set, 3},
    {"_rkafka_kafka_conf_destroy", (DL_FUNC) &_rkafka_kafka_conf_destroy, 1},
    {"_rkafka_kafka_topic_conf_new", (DL_FUNC) &_rkafka_kafka_topic_conf_new, 0},
    {"_rkafka_kafka_topic_conf_set", (DL_FUNC) &_rkafka_kafka_topic_conf_set, 3},
    {"_rkafka_kafka_topic_conf_destroy", (DL_FUNC) &_rkafka_kafka_topic_conf_destroy, 1},
    {"_rkafka_kafka_consumer_new", (DL_FUNC) &_rkafka_kafka_consumer_new, 1},
    {"_rkafka_kafka_producer_new", (DL_FUNC) &_rkafka_kafka_producer_new, 1},
    {"_rkafka_kafka_destroy", (DL_FUNC) &_rkafka_kafka_destroy, 1},
    {"_rkafka_kafka_topic_new", (DL_FUNC) &_rkafka_kafka_topic_new, 3},
    {"_rkafka_kafka_topic_destroy", (DL_FUNC) &_rkafka_kafka_topic_destroy, 1},
    {"_rkafka_kafka_produce", (DL_FUNC) &_rkafka_kafka_produce, 4},
    {"_rkafka_kafka_produce_batch", (DL_FUNC) &_rkafka_kafka_produce_batch, 3},
    {"_rkafka_kafka_consume_batch", (DL_FUNC) &_rkafka_kafka_consume_batch, 3},
    {"_rkafka_kafka_consume_start", (DL_FUNC) &_rkafka_kafka_consume_start, 3},
    {"_rkafka_kafka_consume_stop", (DL_FUNC) &_rkafka_kafka_consume_stop, 2},
    {"_rkafka_kafka_flush", (DL_FUNC) &_rkafka_kafka_flush, 2},
    {"_rkafka_kafka_subscribe", (DL_FUNC) &_rkafka_kafka_subscribe, 2},
    {"_rkafka_kafka_unsubscribe", (DL_FUNC) &_rkafka_kafka_unsubscribe, 1},
    {"_rkafka_kafka_consumer_poll", (DL_FUNC) &_rkafka_kafka_consumer_poll, 2},
    {"_rkafka_kafka_consumer_close", (DL_FUNC) &_rkafka_kafka_consumer_close, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rkafka(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
